Estructuras y AlgoritmosProyecto PROP1. Clase DiccionarioLa clase diccionario tiene como función almacenar todas las palabras de todos los documentos. Se usa principalmente en métodos de consulta (consulta por expresión booleana, consulta de documentos parecidos a partir de un documento y consulta de documentos parecidos a partir de una query). Y ha de actualizarse continuamente.  1.1 EstructurasEs muy importante que el tiempo de una consulta sea mínimo, y por ello la clase diccionario está dotada de estructuras que permiten búsquedas muy rápidas. La clase diccionario está compuesta por dos estructuras principales: Un Array llamado arraypalabras, y un Tree Map llamado diccionario.1.1.1 arraypalabrasarraypalabras es un Array de Strings que almacena todas las palabras sin repeticiones de todos los documentos en el orden que se van introduciendo nuevos documentos. En un principio el tamaño del array es 0, y cada vez que se añada o modifique un documento y aparezcan nuevas palabras, se añaden al final de la lista. 1.1.2 diccionariodiccionario es un tree map que también almacena las palabras sin repeticiones de todos los documentos. Al utilizar la propia palabra como clave del tree, las palabras están ordenadas alfabéticamente, haciendo que sea nuestra herramienta básica de consulta ya que las búsquedas se realizan en tiempo log(n) en vez de lineal. El contenido del tree map es una clase interna de la clase Diccionario llamada ContenidoDiccionario. ContenidoDiccionario está formada por dos integers, índice y freqGlobal, y un LinkedHashSet de Documentos llamado documentos. 1. índice guarda la posición de la palabra en arraypalabras. 2. freqGlobal guarda el numero de ocurrencias de la palabra en todos los documentos y juega un papel importante en el cálculo de pesos para la comparación de similitud entre documentos. 3. documentos guarda una lista de documentos que contienen la palabra y es primordial para las consultas. 1.2 AlgoritmosNuestra instancia de diccionario ha de estar siempre actualizada para poder realizar consultas correctas. Ha de modificarse cada vez que se añada, se modifique o se elimine un documento. 1.2.1 Método de AgregaciónCuando se añade un documento, la clase Documentos genera un vector con las palabras funcionales de dicho documento. Diccionario lo lee y para cada palabra, busca en el tree map su clave. En caso de que esté, incrementa por uno freqGlobal y añade el documento a documentos. En caso de que no esté, se agrega la palabra al final de arraydocumentos y se añade un nuevo nodo en diccionario utilizando la palabra como clave, se inicializa índice a arraypalabras.size() (la ultima posición de arraypalabras) y freqGlobal a 1, y se añade el documento a documentos. Las palabras en diccionario estarán ordenadas según su clave en todo momento gracias a que es un tree map. 1.2.2 Método de Modificación y EliminaciónCuando se elimina un documento, diccionario recoge el vector de palabras de dicho documento y, por cada palabra del vector de palabras funcionales, accede a la palabra y decrementa en uno su freqGlobal y elimina el documento del vector de documentos. En caso de modificación de un documento, se hace el mismo procedimiento que eliminación y se agrega como un nuevo documento el documento resultante a la modificación. 2. Clase Consulta Documentos ParecidosLa clase ConsultaDocumentosParecidos tiene como función devolver una lista de documentos en orden de mayor similitud a un documento o una query. Es un método de consulta que utiliza un método de calculo espacio vectorial a partir de vectores con peso. 2.1 EstructurasLa clase ConsultaDocumentosParecidos utiliza la clase Sparse Array, ya que par poder comparar las palabras de dos documentos para calcular su similitud, necesitamos poder comparar las palabras que un documento tiene y otra no, y eso supondría muchos campos nulos en nuestros vectores. ConsultaDocumentosParecidos también utiliza array lists para almacenar los documentos resultantes de la búsqueda. 2.2 AlgoritmosPara poder calcular la similitud entre diferentes conjuntos de palabras, combinamos dos métodos: el calculo de peso obtenido utilizando tfidf y similitud de coseno. “En la recuperación de la información, tf-idf, abreviatura de la frecuencia de los documentos de frecuencia inversa, es una estadística numérica que pretende reflejar la importancia de una palabra para un documento en una colección o corpus. A menudo se utiliza como un factor de ponderación en la recuperación de la información y la minería de texto.” (Wikipedia.org) Hay diferentes maneras de calcular tf, la opción más sencilla es utilizar la frecuencia bruta de un término en un documento, es decir, el número de veces que el término t ocurre en el documento d, pero hay otras maneras de calcularlo:  de manera booleana (tf (t, d) = 1 si t ocurre en d y 0 en caso contrario) y de manera logarítmica (tf (t, d) = 1 + log ft, d, o cero si ft, d es cero). La frecuencia del documento inverso es una medida de cuánta información proporciona la palabra, es decir, si el término es común o raro en todos los documentos. Es la fracción inversa escalar logarítmicamente de los documentos que contienen la palabra, obtenida dividiendo el número total de documentos por el número de documentos que contienen el término, y luego tomando el logaritmo de ese cociente.		Maria Hitz